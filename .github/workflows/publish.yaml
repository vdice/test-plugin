# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Plugin Build and Publish

on:
  push:
    branches: ["main"]
    tags: ["plugin/v*"]

env:
  PROGRAM_NAME: print-version

jobs:
  build:
    name: Build Plugin for ${{ matrix.config.os }} ${{ matrix.config.arch }}
    strategy:
      matrix:
        config:
          - { target: "x86_64-unknown-linux-gnu", os: "ubuntu-22.04", arch: "amd64", extension: "" }
          - { target: "aarch64-unknown-linux-gnu", os: "ubuntu-22.04", arch: "aarch64", extension: "" }
          - { target: "x86_64-apple-darwin", os: "macos-13", arch: "amd64", extension: "" }
          - { target: "aarch64-apple-darwin", os: "macos-14", arch: "aarch64", extension: "" }
          - { target: "x86_64-pc-windows-msvc", os: "windows-latest", arch: "amd64", extension: ".exe" }
      fail-fast: true
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: bash
        working-directory: plugin
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86
          targets: ${{ matrix.config.target }}

      - name: Set up for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml

      - name: Build plugin binary
        run: cargo build --release --target ${{ matrix.config.target }} ${{ matrix.config.extraArg }}

      - name: Upload plugin artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROGRAM_NAME}}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ./plugin/target/${{ matrix.config.target }}/release/${{ env.PROGRAM_NAME}}${{ matrix.config.extension }}

  pluginify:
    name: Pluginify ${{ matrix.config.os }} ${{ matrix.config.arch }}
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    strategy:
      matrix:
        config:
          - { os: "ubuntu-22.04", arch: "amd64", extension: "" }
          - { os: "ubuntu-22.04", arch: "aarch64", extension: "" }
          - { os: "macos-13", arch: "amd64", extension: "" }
          - { os: "macos-14", arch: "aarch64", extension: "" }
          - { os: "windows-latest", arch: "amd64", extension: ".exe" }
      fail-fast: true
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: bash
        working-directory: plugin
    steps:
      - uses: actions/checkout@v4

      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # TODO: uncomment once spin-pluginify --version is supported
          # plugins: pluginify

      - name: Install pluginify
        run: spin plugins install pluginify -y

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.PROGRAM_NAME}}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ./plugin/target/release/${{ env.PROGRAM_NAME}}${{ matrix.config.extension }}

      - name: Pluginify
        run: spin pluginify --arch ${{ matrix.config.arch }} -f spin-pluginify.release.toml

      - name: Upload plugin artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROGRAM_NAME}}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          overwrite: true
          path: |
            ./plugin/*.tar.gz
            ./plugin/*.json

  package:
    name: Package plugin
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: pluginify
    steps:
      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # TODO: uncomment once spin-pluginify --version is supported and remove separate install
          # plugins: pluginify

      - name: Install pluginify
        run: spin plugins install pluginify -y

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: ${{ env.PROGRAM_NAME}}-*

      - name: Generate merged manifest
        run: spin pluginify --merge --release-url-base https://github.com/fermyon/neutrino/releases/download/${GITHUB_REF_NAME}/ >${{ env.PROGRAM_NAME }}.json

      - name: Upload merged manifest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROGRAM_NAME }}.json
          path: ${{ env.PROGRAM_NAME }}.json

  release:
    name: Release plugin
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: package
    permissions:
      contents: write # Allow the job to create a GH release
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: ${{ env.PROGRAM_NAME}}-*
          merge-multiple: true

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.PROGRAM_NAME}}.json

      - name: Create GH release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${GITHUB_REF_NAME}" \
            ${{ env.PROGRAM_NAME}}* \
            --title "Spin ${{ env.PROGRAM_NAME }} plugin ${GITHUB_REF_NAME#plugin/}"

  create-spin-plugins-pr:
    name: Create spin-plugins PR
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write # Allow the job to update the GH release with checksums
    steps:
      - uses: actions/checkout@v4

      - name: Create PR in the spin-plugins repo
        # TODO: update to next release
        # uses: rajatjindal/spin-plugin-releaser@v1.0.15
        uses: rajatjindal/spin-plugin-releaser@fix-diff-tag-formats
        with:
          github_token: ${{ github.token }}
          upload_checksums: true
          template_file: plugin/.spin-plugin.json.tmpl
          # TODO: remove this after testing
          release_webhook_url: "https://spin-plugin-releaser-staging.fermyon.app"